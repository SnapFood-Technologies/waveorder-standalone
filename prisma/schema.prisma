generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  verificationToken  String?
  verificationExpiry DateTime?

  setupToken  String? // Add this field
  setupExpiry DateTime? // Add this field

  role       UserRole       @default(BUSINESS_OWNER)
  accounts   Account[]
  sessions   Session[]
  businesses BusinessUser[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Business {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String             @unique
  description        String?
  logo               String?
  coverImage         String?
  phone              String?
  email              String?
  address            String?
  storeLatitude      Float?
  storeLongitude     Float?
  website            String?
  whatsappNumber     String
  businessType       BusinessType       @default(RESTAURANT)
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)

  // Branding
  primaryColor        String  @default("#0D9488")
  secondaryColor      String  @default("#1F2937")
  fontFamily          String  @default("Inter")
  whatsappButtonColor String?
  mobileCartStyle     String  @default("bar")

  cartBadgeColor     String @default("#EF4444") // Red color for cart badge numbers
  featuredBadgeColor String @default("#EF4444") // Red color for "Popular" badges

  deliveryZones DeliveryZone[]

  // Settings
  currency       String @default("USD")
  timezone       String @default("UTC")
  language       String @default("en")
  deliveryFee    Float  @default(0)
  minimumOrder   Float  @default(0)
  deliveryRadius Float  @default(10)

  // Payment settings
  paymentMethods      PaymentMethod[]
  paymentInstructions String?

  // Business hours - JSON structure for each day of week
  businessHours Json? // {"monday": {"open": "09:00", "close": "21:00", "closed": false}, ...}

  // WhatsApp settings
  messageTemplate  String?
  autoReply        Boolean @default(false)
  autoReplyMessage String?

  customDomain     String?
  domainStatus     DomainStatus @default(NONE)
  subdomainEnabled Boolean      @default(false)

  businessGoals         BusinessGoal[]
  deliveryEnabled       Boolean        @default(true)
  pickupEnabled         Boolean        @default(false)
  dineInEnabled         Boolean        @default(false)
  estimatedDeliveryTime String? // "30-45 minutes"
  estimatedPickupTime   String? // "15-20 minutes"
  greetingMessage       String?
  orderNumberFormat     String         @default("WO-{number}")

  // Store Closure Fields
  isTemporarilyClosed Boolean   @default(false)
  closureReason       String? // Predefined reasons or custom
  closureMessage      String? // Custom message for customers
  closureStartDate    DateTime? // When closure started
  closureEndDate      DateTime? // Expected reopening (optional)

  // SEO Configuration (English/Default)
  seoTitle       String? // Custom page title, falls back to displayName or username
  seoDescription String? // Meta description for search engines
  seoKeywords    String? // Comma-separated keywords
  favicon        String? // Custom favicon URL (PRO feature with custom domain)
  ogImage        String? // Open Graph image for social sharing
  canonicalUrl   String? // Canonical URL if using custom domain
  noIndex        Boolean @default(false) // Override isIndexable for specific SEO control
  noFollow       Boolean @default(false) // Add nofollow to external links

  // Structured Data / Schema.org
  schemaType String? @default("Person") // Person, Organization, LocalBusiness, etc.
  schemaData Json? // Additional schema.org structured data

  // Albanian SEO Configuration
  seoTitleAl       String? // Albanian version of SEO title
  seoDescriptionAl String? // Albanian version of SEO description
  seoKeywordsAl    String? // Albanian version of SEO keywords
  descriptionAl    String? // Albanian version of business description (for SEO meta description)

  isIndexable Boolean @default(false)

  // Order Notification Settings
  orderNotificationsEnabled   Boolean   @default(false)
  orderNotificationEmail      String? // Can be different from business email
  orderNotificationLastUpdate DateTime?

  users              BusinessUser[]
  categories         Category[]
  products           Product[]
  orders             Order[]
  customers          Customer[]
  analytics          Analytics[]
  orderNotifications OrderNotification[]

  onboardingCompleted  Boolean @default(false)
  onboardingStep       Int     @default(0)
  setupWizardCompleted Boolean @default(false)

  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TeamInvitation    TeamInvitation[]
  InventoryActivity InventoryActivity[]
}

model OrderNotification {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  businessId   String      @db.ObjectId
  orderId      String      @db.ObjectId
  orderNumber  String
  orderStatus  OrderStatus
  customerName String
  total        Float
  notifiedAt   DateTime    @default(now())
  emailSent    Boolean     @default(false)
  emailError   String? // Store email delivery errors

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([orderId])
}

model BusinessUser {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  businessId String       @db.ObjectId
  role       BusinessRole @default(STAFF)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, businessId])
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  businessId  String  @db.ObjectId

  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  images        String[]
  price         Float
  originalPrice Float?
  sku           String?
  stock         Int      @default(0)
  isActive      Boolean  @default(true)
  featured      Boolean  @default(false)

  // Enhanced inventory fields
  trackInventory Boolean @default(true)
  lowStockAlert  Int? // Alert when stock goes below this number

  categoryId String @db.ObjectId
  businessId String @db.ObjectId

  inventoryActivities InventoryActivity[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  variants   ProductVariant[]
  modifiers  ProductModifier[]
  orderItems OrderItem[]

  // SEO
  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  stock     Int     @default(0)
  sku       String?
  productId String  @db.ObjectId

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  // Inventory activities for variants
  inventoryActivities InventoryActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryActivity {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId  String  @db.ObjectId
  variantId  String? @db.ObjectId
  businessId String  @db.ObjectId

  type     InventoryChangeType
  quantity Int // Positive for increase, negative for decrease
  oldStock Int
  newStock Int
  reason   String? // "Manual adjustment", "Order sale", "Restock", etc.

  // Who made the change
  changedBy String? // Admin user ID

  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant  ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  business Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  company String? // Business name (optional)
  subject ContactSubject @default(GENERAL)
  message String

  // Spam detection
  isSpam    Boolean @default(false)
  spamScore Float? // Akismet confidence score

  // Request metadata
  ipAddress String?
  userAgent String?
  referer   String?

  // Status tracking
  status ContactStatus @default(PENDING)

  // Admin handling
  adminNotes  String?
  assignedTo  String? // Admin user ID
  respondedAt DateTime?
  respondedBy String? // Admin user ID

  // Email tracking
  emailSent      Boolean   @default(false)
  emailSentAt    DateTime?
  emailConfirmed Boolean   @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model ProductModifier {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float   @default(0)
  required  Boolean @default(false)
  productId String  @db.ObjectId

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String?
  address    String?
  businessId String  @db.ObjectId

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  orders   Order[]

  // Customer tier for wholesale pricing
  tier CustomerTier @default(REGULAR)

  // Enhanced address structure
  addressJson Json? // {
  // "street": "123 Main St",
  // "additional": "Apt 4B", 
  // "zipCode": "12345",
  // "city": "New York",
  // "country": "USA",
  // "latitude": 40.7128,
  // "longitude": -74.0060
  // }

  // Admin and management fields
  addedByAdmin Boolean  @default(false)
  tags         String[] // ["vip", "frequent", "wholesale", etc.]
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phone, businessId])
}

model DeliveryZone {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  maxDistance Float // Maximum distance in km for this zone
  fee         Float // Delivery fee for this zone
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  businessId  String  @db.ObjectId

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  type        OrderType   @default(DELIVERY)

  customerId String @db.ObjectId
  businessId String @db.ObjectId

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  items         OrderItem[]
  notifications OrderNotification[]

  customerLatitude  Float?
  customerLongitude Float?

  // Pricing
  subtotal    Float
  deliveryFee Float @default(0)
  tax         Float @default(0)
  discount    Float @default(0)
  total       Float

  // Delivery info
  deliveryAddress String?
  deliveryTime    DateTime?
  notes           String?

  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?

  // WhatsApp
  whatsappMessageId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  price    Float

  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  variantId String? @db.ObjectId

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  modifiers String[] // JSON array of selected modifiers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamInvitation {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  businessId String           @db.ObjectId
  role       BusinessRole     @default(STAFF)
  token      String           @unique
  status     InvitationStatus @default(PENDING)
  expiresAt  DateTime

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  date       DateTime

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Metrics
  visitors Int   @default(0)
  orders   Int   @default(0)
  revenue  Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, date])
}

enum UserRole {
  SUPER_ADMIN
  BUSINESS_OWNER
  STAFF
}

enum InventoryChangeType {
  MANUAL_INCREASE
  MANUAL_DECREASE
  ORDER_SALE
  RESTOCK
  ADJUSTMENT
  LOSS
  RETURN
}

enum BusinessRole {
  OWNER
  MANAGER
  STAFF
}

enum BusinessType {
  RESTAURANT
  CAFE
  RETAIL
  JEWELRY
  FLORIST
  GROCERY
  OTHER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  STRIPE
  PAYPAL
  BKT
  MOBILE_WALLET
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DELIVERY
  PICKUP
  DINE_IN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CustomerTier {
  REGULAR
  VIP
  WHOLESALE
}

enum BusinessGoal {
  ACCEPT_WHATSAPP_ORDERS
  MANAGE_PRODUCTS_INVENTORY
  TRACK_DELIVERY_PICKUP
  BUILD_CUSTOMER_RELATIONSHIPS
  TEAM_COLLABORATION
}

enum DomainStatus {
  NONE
  PENDING
  ACTIVE
  FAILED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ContactSubject {
  GENERAL
  DEMO
  SETUP
  BILLING
  TECHNICAL
  FEATURE
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  SPAM
  CLOSED
}
