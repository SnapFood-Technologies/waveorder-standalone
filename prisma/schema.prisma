generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  // Email change verification
  pendingEmail      String?
  emailChangeToken  String?
  emailChangeExpiry DateTime?

  verificationToken  String?
  verificationExpiry DateTime?

  // Login activity tracking
  loginActivity LoginActivity[]

  lastPasswordChange DateTime?

  setupToken  String?
  setupExpiry DateTime?

  passwordSetupToken  String?
  passwordSetupExpiry DateTime?

  // Subscription and Stripe fields
  plan             SubscriptionPlan @default(FREE)
  stripeCustomerId String?
  subscriptionId   String?          @db.ObjectId
  subscription     Subscription?    @relation(fields: [subscriptionId], references: [id])

  role       UserRole       @default(BUSINESS_OWNER)
  accounts   Account[]
  sessions   Session[]
  businesses BusinessUser[]
  
  // Support relations
  createdTickets    SupportTicket[] @relation("TicketCreator")
  assignedTickets   SupportTicket[] @relation("TicketAssignee")
  resolvedTickets   SupportTicket[] @relation("TicketResolver")
  ticketComments    TicketComment[]
  
  sentMessages      SupportMessage[] @relation("MessageSender")
  receivedMessages  SupportMessage[] @relation("MessageRecipient")
  
  notifications     Notification[]
  
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model LoginActivity {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  device    String
  browser   String
  location  String
  ipAddress String
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  loginAt DateTime @default(now())

  @@index([userId])
  @@index([loginAt])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// NEW: Subscription model for Stripe integration
model Subscription {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  stripeId String @unique

  status  String
  priceId String
  plan    SubscriptionPlan

  // Current period
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  // Cancellation
  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime?

  // Relations
  users User[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// NEW: Webhook logging model
model WebhookLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventType String
  stripeId  String?
  data      Json
  processed Boolean  @default(false)
  error     String?
  createdAt DateTime @default(now())

  @@map("webhook_logs")
}

// NEW: Email verification model
model EmailVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime
  type      String // 'verification', 'password_reset'
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

model Business {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String             @unique
  description        String?
  logo               String?
  coverImage         String?
  phone              String?
  email              String?
  address            String?
  storeLatitude      Float?
  storeLongitude     Float?
  website            String?
  whatsappNumber     String
  businessType       BusinessType       @default(RESTAURANT)
  subscriptionPlan   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)

  createdByAdmin Boolean @default(false)

  // Branding
  primaryColor        String  @default("#0D9488")
  secondaryColor      String  @default("#1F2937")
  fontFamily          String  @default("Inter")
  whatsappButtonColor String?
  mobileCartStyle     String  @default("bar")

  cartBadgeColor     String @default("#EF4444")
  featuredBadgeColor String @default("#EF4444")

  deliveryZones DeliveryZone[]

  // Settings
  currency       String @default("USD")
  timezone       String @default("UTC")
  language       String @default("en")
  deliveryFee    Float  @default(0)
  minimumOrder   Float  @default(0)
  deliveryRadius Float  @default(10)

  // Payment settings
  paymentMethods      PaymentMethod[]
  paymentInstructions String?

  // Business hours
  businessHours Json?

  // WhatsApp settings
  messageTemplate  String?
  autoReply        Boolean @default(false)
  autoReplyMessage String?

  customDomain     String?
  domainStatus     DomainStatus @default(NONE)
  subdomainEnabled Boolean      @default(false)

  businessGoals         BusinessGoal[]
  deliveryEnabled       Boolean        @default(true)
  pickupEnabled         Boolean        @default(false)
  dineInEnabled         Boolean        @default(false)
  estimatedDeliveryTime String?
  estimatedPickupTime   String?
  greetingMessage       String?
  orderNumberFormat     String         @default("WO-{number}")

  // Store Closure Fields
  isTemporarilyClosed Boolean   @default(false)
  closureReason       String?
  closureMessage      String?
  closureStartDate    DateTime?
  closureEndDate      DateTime?

  // SEO Configuration (English/Default)
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  favicon        String?
  ogImage        String?
  canonicalUrl   String?
  noIndex        Boolean @default(false)
  noFollow       Boolean @default(false)

  // Structured Data / Schema.org
  schemaType String? @default("Person")
  schemaData Json?

  // Albanian SEO Configuration
  seoTitleAl       String?
  seoDescriptionAl String?
  seoKeywordsAl    String?
  descriptionAl    String?

  isIndexable Boolean @default(false)

  // Order Notification Settings
  orderNotificationsEnabled   Boolean   @default(false)
  orderNotificationEmail      String?
  orderNotificationLastUpdate DateTime?

  users              BusinessUser[]
  categories         Category[]
  products           Product[]
  orders             Order[]
  customers          Customer[]
  analytics          Analytics[]
  orderNotifications OrderNotification[]
  
  // Support relations
  supportTickets     SupportTicket[]
  supportMessages    SupportMessage[]

  onboardingCompleted  Boolean @default(false)
  onboardingStep       Int     @default(0)
  setupWizardCompleted Boolean @default(false)

  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TeamInvitation    TeamInvitation[]
  InventoryActivity InventoryActivity[]
}

model OrderNotification {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  businessId   String      @db.ObjectId
  orderId      String      @db.ObjectId
  orderNumber  String
  orderStatus  OrderStatus
  customerName String
  total        Float
  notifiedAt   DateTime    @default(now())
  emailSent    Boolean     @default(false)
  emailError   String?

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([orderId])
}

model BusinessUser {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  businessId String       @db.ObjectId
  role       BusinessRole @default(STAFF)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, businessId])
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  businessId  String  @db.ObjectId

  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  images        String[]
  price         Float
  originalPrice Float?
  sku           String?
  stock         Int      @default(0)
  isActive      Boolean  @default(true)
  featured      Boolean  @default(false)

  trackInventory Boolean @default(true)
  lowStockAlert  Int?

  enableLowStockNotification Boolean @default(false)

  categoryId String @db.ObjectId
  businessId String @db.ObjectId

  inventoryActivities InventoryActivity[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  variants   ProductVariant[]
  modifiers  ProductModifier[]
  orderItems OrderItem[]

  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  stock     Int     @default(0)
  sku       String?
  productId String  @db.ObjectId

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  inventoryActivities InventoryActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryActivity {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId  String  @db.ObjectId
  variantId  String? @db.ObjectId
  businessId String  @db.ObjectId

  type     InventoryChangeType
  quantity Int
  oldStock Int
  newStock Int
  reason   String?

  changedBy String?

  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant  ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  business Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  company String?
  subject ContactSubject @default(GENERAL)
  message String

  isSpam    Boolean @default(false)
  spamScore Float?

  ipAddress String?
  userAgent String?
  referer   String?

  status ContactStatus @default(PENDING)

  adminNotes  String?
  assignedTo  String?
  respondedAt DateTime?
  respondedBy String?

  emailSent      Boolean   @default(false)
  emailSentAt    DateTime?
  emailConfirmed Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model ProductModifier {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float   @default(0)
  required  Boolean @default(false)
  productId String  @db.ObjectId

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String?
  address    String?
  businessId String  @db.ObjectId

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  orders   Order[]

  tier CustomerTier @default(REGULAR)

  addressJson Json?

  addedByAdmin Boolean  @default(false)
  tags         String[]
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phone, businessId])
}

model DeliveryZone {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  maxDistance Float
  fee         Float
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  businessId  String  @db.ObjectId

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  type        OrderType   @default(DELIVERY)

  customerId String @db.ObjectId
  businessId String @db.ObjectId

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  items         OrderItem[]
  notifications OrderNotification[]

  customerLatitude  Float?
  customerLongitude Float?

  subtotal    Float
  deliveryFee Float @default(0)
  tax         Float @default(0)
  discount    Float @default(0)
  total       Float

  deliveryAddress String?
  deliveryTime    DateTime?
  notes           String?

  createdByAdmin Boolean @default(false)
  createdBy      String? @db.ObjectId

  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?

  whatsappMessageId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  price    Float

  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  variantId String? @db.ObjectId

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  modifiers String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamInvitation {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  businessId String           @db.ObjectId
  role       BusinessRole     @default(STAFF)
  token      String           @unique
  status     InvitationStatus @default(PENDING)
  expiresAt  DateTime

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  date       DateTime

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  visitors Int   @default(0)
  orders   Int   @default(0)
  revenue  Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, date])
}

enum UserRole {
  SUPER_ADMIN
  BUSINESS_OWNER
  STAFF
}

enum InventoryChangeType {
  MANUAL_INCREASE
  MANUAL_DECREASE
  ORDER_SALE
  RESTOCK
  ADJUSTMENT
  LOSS
  RETURN
}

enum BusinessRole {
  OWNER
  MANAGER
  STAFF
}

enum BusinessType {
  RESTAURANT
  CAFE
  RETAIL
  JEWELRY
  FLORIST
  GROCERY
  OTHER
}

enum SubscriptionPlan {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  STRIPE
  PAYPAL
  BKT
  MOBILE_WALLET
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DELIVERY
  PICKUP
  DINE_IN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CustomerTier {
  REGULAR
  VIP
  WHOLESALE
}

enum BusinessGoal {
  ACCEPT_WHATSAPP_ORDERS
  MANAGE_PRODUCTS_INVENTORY
  TRACK_DELIVERY_PICKUP
  BUILD_CUSTOMER_RELATIONSHIPS
  TEAM_COLLABORATION
}

enum DomainStatus {
  NONE
  PENDING
  ACTIVE
  FAILED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ContactSubject {
  GENERAL
  DEMO
  SETUP
  BILLING
  TECHNICAL
  FEATURE
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  SPAM
  CLOSED
}

// Support Ticket Model
model SupportTicket {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber String       @unique
  subject     String
  description String
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  type        TicketType    @default(GENERAL)
  
  // Relations
  businessId  String        @db.ObjectId
  business    Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  createdById String        @db.ObjectId
  createdBy   User          @relation("TicketCreator", fields: [createdById], references: [id])
  
  assignedToId String?      @db.ObjectId
  assignedTo   User?        @relation("TicketAssignee", fields: [assignedToId], references: [id])
  
  // Comments
  comments    TicketComment[]
  
  resolvedAt  DateTime?
  resolvedById String?      @db.ObjectId
  resolvedBy   User?        @relation("TicketResolver", fields: [resolvedById], references: [id])
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([businessId])
  @@index([status])
  @@index([createdById])
}

model TicketComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isInternal Boolean @default(false)
  
  ticketId  String   @db.ObjectId
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([ticketId])
}

// Support Message Model (Thread-based messaging)
model SupportMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  threadId   String
  subject    String?
  content    String
  
  businessId String?  @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  senderId   String   @db.ObjectId
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  
  recipientId String  @db.ObjectId
  recipient   User    @relation("MessageRecipient", fields: [recipientId], references: [id])
  
  isRead     Boolean  @default(false)
  readAt     DateTime?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([threadId])
  @@index([senderId])
  @@index([recipientId])
  @@index([businessId])
}

// Notification Model
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  link      String?
  
  userId    String           @db.ObjectId
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  isRead    Boolean          @default(false)
  readAt    DateTime?
  
  createdAt DateTime         @default(now())
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// Enums
enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_RESPONSE
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketType {
  GENERAL
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
}

enum NotificationType {
  TICKET_CREATED
  TICKET_UPDATED
  TICKET_RESOLVED
  MESSAGE_RECEIVED
  SYSTEM_UPDATE
}
