name: 🚀 Deploy to Azure Production Server

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Run low stock alerts daily at 8 AM UTC
    - cron: '0 8 * * *'

# Configuration variables - change these as needed
env:
  NODE_VERSION: '22'
  APP_NAME: 'waveorder-web-app'  # Change this to your preferred app name
  PM2_ECOSYSTEM_FILE: 'ecosystem.config.js'  # Optional: if you want to use PM2 ecosystem file

jobs:
  deploy:
    name: 🏗️ Build and Deploy
    runs-on: self-hosted
    timeout-minutes: 15  # Prevents hanging builds
    
    steps:
      # 📥 CHECKOUT CODE
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true  # Ensures clean checkout

      # 🧹 CLEAN PREVIOUS BUILD
      - name: 🧹 Clean Previous Build
        run: |
          echo "Cleaning previous build artifacts..."
          rm -rf node_modules
          rm -rf .next
          rm -f package-lock.json
          echo "✅ Cleanup completed"

      # ⚙️ SETUP NODE.JS
      - name: ⚙️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 📦 INSTALL DEPENDENCIES
      - name: 📦 Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm install --no-audit --no-fund
          echo "✅ Dependencies installed successfully"

      # 🏗️ BUILD APPLICATION
      - name: 🏗️ Build Application
        env:
          # 🗄️ Database
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
          # 🔐 Authentication
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          
          # 💳 Stripe Payment Processing
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_FREE_PRICE_ID: ${{ secrets.STRIPE_FREE_PRICE_ID }}
          STRIPE_PRO_PRICE_ID: ${{ secrets.STRIPE_PRO_PRICE_ID }}
          STRIPE_PRO_ANNUAL_PRICE_ID: ${{ secrets.STRIPE_PRO_ANNUAL_PRICE_ID }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          
          # 🔧 API Keys
          AKISMET_API_KEY: ${{ secrets.AKISMET_API_KEY }}
          BKT_API_KEY: ${{ secrets.BKT_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID }}

          # CRON
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          
          # 🌐 Public Environment Variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_CLARITY_ID: ${{ secrets.NEXT_PUBLIC_CLARITY_ID }}
          NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          
          # 📧 Email Configuration
          CONTACT_EMAIL: ${{ secrets.CONTACT_EMAIL }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          LEGAL_EMAIL: ${{ secrets.LEGAL_EMAIL }}
          PRIVACY_EMAIL: ${{ secrets.PRIVACY_EMAIL }}

          # API Docs
          API_DOCS_PASSWORD: ${{ secrets.API_DOCS_PASSWORD }}
          
          # 🏭 Build Environment
          NODE_ENV: production
        run: |
          echo "Starting build process..."
          npm run build
          echo "✅ Build completed successfully"

      # 🧹 CLEANUP DEPENDENCIES
      - name: 🧹 Remove Development Dependencies
        run: |
          echo "Removing development dependencies..."
          npm prune --production --no-audit
          echo "✅ Development dependencies removed"

      # 📝 CREATE PRODUCTION ENVIRONMENT FILE
      - name: 📝 Create Production Environment
        run: |
          echo "Creating production environment file..."
          cat > .env.production <<'EOF'
          # 🏭 Production Environment Configuration
          NODE_ENV=production
          
          # 🗄️ Database
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # 🔐 Authentication
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          
          # 💳 Stripe Payment Processing
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_FREE_PRICE_ID=${{ secrets.STRIPE_FREE_PRICE_ID }}
          STRIPE_PRO_PRICE_ID=${{ secrets.STRIPE_PRO_PRICE_ID }}
          STRIPE_PRO_ANNUAL_PRICE_ID=${{ secrets.STRIPE_PRO_ANNUAL_PRICE_ID }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          
          # 🔧 API Keys
          AKISMET_API_KEY=${{ secrets.AKISMET_API_KEY }}
          BKT_API_KEY=${{ secrets.BKT_API_KEY }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }}

          # CRON
          CRON_SECRET=${{ secrets.CRON_SECRET }}
          
          # 🌐 Public Variables
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_CLARITY_ID=${{ secrets.NEXT_PUBLIC_CLARITY_ID }}
          NEXT_PUBLIC_GA_ID=${{ secrets.NEXT_PUBLIC_GA_ID }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}

          # 📧 Email Configuration
          CONTACT_EMAIL=${{ secrets.CONTACT_EMAIL }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          LEGAL_EMAIL=${{ secrets.LEGAL_EMAIL }}
          PRIVACY_EMAIL=${{ secrets.PRIVACY_EMAIL }}

          # API Docs
          API_DOCS_PASSWORD=${{ secrets.API_DOCS_PASSWORD }}
          EOF
          echo "✅ Production environment file created"

      # 📦 SETUP PM2
      - name: 📦 Setup PM2 Process Manager
        run: |
          echo "Checking PM2 installation..."
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2 globally..."
            npm install -g pm2
          else
            echo "PM2 is already installed"
          fi
          pm2 --version

      # 🚀 DEPLOY APPLICATION
      - name: 🚀 Deploy Application
        run: |
          echo "Deploying application: ${{ env.APP_NAME }}"
          
          # Check if app is already running
          if pm2 list | grep -q "${{ env.APP_NAME }}"; then
            echo "♻️ Reloading existing application..."
            pm2 reload ${{ env.APP_NAME }} --wait-ready --listen-timeout 10000 || {
              echo "⚠️ Reload failed, attempting restart..."
              pm2 restart ${{ env.APP_NAME }}
            }
          else
            echo "🆕 Starting new application..."
            pm2 start npm --name "${{ env.APP_NAME }}" -- start
          fi
          
          # Save PM2 process list
          pm2 save
          
          echo "✅ Application deployed successfully!"

      # ✅ DEPLOYMENT STATUS
      - name: ✅ Verify Deployment
        run: |
          echo "🔍 Checking application status..."
          pm2 status
          pm2 logs ${{ env.APP_NAME }} --lines 5 --nostream
          echo "✅ Deployment verification complete!"

      # 📧 LOW STOCK ALERTS (Only runs on schedule)
      - name: 📧 Send Low Stock Alerts
        if: github.event_name == 'schedule'
        run: |
          echo "📧 Triggering low stock alerts..."
          curl -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
               -H "Content-Type: application/json" \
               https://your-domain.com/api/cron/low-stock-alerts
          echo "✅ Low stock alerts sent successfully"